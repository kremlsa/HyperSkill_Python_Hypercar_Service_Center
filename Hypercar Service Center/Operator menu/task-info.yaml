type: edu
custom_name: stage4
files:
- name: hypercar/tickets/migrations/__init__.py
  visible: true
  learner_created: false
- name: hypercar/tickets/__init__.py
  visible: true
  learner_created: false
- name: hypercar/hypercar/urls.py
  visible: true
  text: |
    """hypercar URL Configuration

    The `urlpatterns` list routes URLs to views. For more information please see:
        https://docs.djangoproject.com/en/2.2/topics/http/urls/
    Examples:
    Function views
        1. Add an import:  from my_app import views
        2. Add a URL to urlpatterns:  path('', views.home, name='home')
    Class-based views
        1. Add an import:  from other_app.views import Home
        2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
    Including another URLconf
        1. Import the include() function: from django.urls import include, path
        2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
    """
    from django.urls import path
    from tickets.views import WelcomeView


    urlpatterns = [
        path('welcome/', WelcomeView.as_view()),
    ]
  learner_created: false
- name: hypercar/hypercar/wsgi.py
  visible: true
  text: |
    """
    WSGI config for hypercar project.

    It exposes the WSGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/
    """

    import os

    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')

    application = get_wsgi_application()
  learner_created: false
- name: hypercar/hypercar/__init__.py
  visible: true
  learner_created: false
- name: hypercar/hypercar/settings.py
  visible: true
  text: |
    """
    Django settings for hypercar project.

    Generated by 'django-admin startproject' using Django 2.2.6.

    For more information on this file, see
    https://docs.djangoproject.com/en/2.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/2.2/ref/settings/
    """

    import os

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'tickets',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'hypercar.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'hypercar.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/2.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.2/howto/static-files/

    STATIC_URL = '/static/'
  learner_created: false
- name: hypercar/manage.py
  visible: true
  text: |
    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys


    def main():
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)


    if __name__ == '__main__':
        main()
  learner_created: false
- name: hypercar/tickets/apps.py
  visible: true
  text: |
    from django.apps import AppConfig


    class TicketsConfig(AppConfig):
        name = 'tickets'
  learner_created: false
- name: hypercar/tickets/admin.py
  visible: true
  text: |
    from django.contrib import admin

    # Register your models here.
  learner_created: false
- name: hypercar/tickets/tests.py
  visible: true
  text: |
    from django.test import TestCase

    # Create your tests here.
  learner_created: false
- name: hypercar/tickets/views.py
  visible: true
  text: |
    from django.views import View
    from django.http.response import HttpResponse


    class WelcomeView(View):
        def get(self, request, *args, **kwargs):
            return HttpResponse('')
  learner_created: false
- name: hypercar/tickets/models.py
  visible: true
  text: |
    from django.db import models

    # Create your models here.
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    # -*- coding: utf-8 -*-
    from hstest import dynamic_test

    from test.base import HyperCarTest

    class HyperServiceTestRunner(HyperCarTest):

        funcs = [
            # 1 task
            HyperCarTest.check_main_header,

            # # 2 task
            # HyperCarTest.check_menu_page_links,
            # # 3 task
            # HyperCarTest.check_ticket_page_links,

            # 4 task
            HyperCarTest.check_ticket_page_links_with_menu,
        ]

        @dynamic_test(data=funcs)
        def test(self, func):
            return func(self)


    if __name__ == '__main__':
        HyperServiceTestRunner().run_tests()

  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/base.py
  visible: false
  text: |
    # -*- coding: utf-8 -*-
    import http.cookiejar
    import io
    import os
    import re
    import sqlite3
    import urllib

    import requests

    from hstest import CheckResult, DjangoTest


    CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))



    class HyperCarTest(DjangoTest):

        use_database = False

        COMMON_LINK_PATTERN = '''<a[^>]+href=['"]([a-zA-Z\d/_]+)['"][^>]*>'''
        CSRF_PATTERN = b'<input[^>]+name="csrfmiddlewaretoken" ' \
                       b'value="(?P<csrf>\w+)"[^>]*>'
        GROUPS_FIRST_PATTERN = '<h4>.*?</h4>.*?<ul>.+?</ul>'
        GROUPS_SECOND_PATTERN = (
            '''<a[^>]+href=['"]([a-zA-Z\d/_]+)['"][^>]*>(.+?)</a>'''
        )
        H2_PATTERN = '<h2>(.+?)</h2>'
        LINK_WITH_TEXT_PATTERN = '''<a[^>]+href=['"]([a-zA-Z\d/_?=]+)['"][^>]*>(.+?)</a>'''
        PARAGRAPH_PATTERN = '<p>(.+?)</p>'
        SRC_PATTERN = '''<source[^>]+src=['"]([a-zA-Z\d/_.]+)['"][^>]*>'''
        DIV_PATTERN = '''<div[^>]*>(.+?)</div>'''
        TEXT_LINK_PATTERN = '''<a[^>]+href=['"][a-zA-Z\d/_]+['"][^>]*>(.+?)</a>'''
        cookie_jar = http.cookiejar.CookieJar()
        USERNAME = 'Test'
        PASSWORD = 'TestPassword123'
        TAG = 'testtag'

        def check_main_header(self) -> CheckResult:
            try:
                page = self.read_page(self.get_url() + 'welcome/')
            except urllib.error.URLError:
                return CheckResult.wrong(
                    'Cannot connect to the main page.'
                )

            h2_headers = re.findall(self.H2_PATTERN, page, re.S)
            h2_headers = self.__stripped_list(h2_headers)
            main_header = 'Welcome to the Hypercar Service!'

            is_main_header = False
            for h2_header in h2_headers:
                if main_header in h2_header:
                    is_main_header = True
                    break

            if not is_main_header:
                return CheckResult.wrong(
                    'Main page should contain <h2> element with text "Welcome to the Hypercar Service!"'
                )

            return CheckResult.correct()

        def check_menu_page_links(self):

            menu_links = ["/get_ticket/change_oil","/get_ticket/inflate_tires","/get_ticket/diagnostic"]

            try:
                page = self.read_page(self.get_url() + 'menu/')
            except urllib.error.URLError:
                return CheckResult.wrong(
                    'Cannot connect to the main page.'
                )

            links_from_page = re.findall(self.LINK_WITH_TEXT_PATTERN, page, re.S)
            links_from_page = self.__stripped_list_with_tuple(links_from_page)
            print(links_from_page)
            for link in menu_links:
                if link not in links_from_page:
                    return CheckResult.wrong(
                        f'Menu page should contain <a> element with href {link}'
                    )

            return CheckResult.correct()
        def check_ticket_page_links(self):

            ticket_links = ["get_ticket/inflate_tires","get_ticket/change_oil","get_ticket/change_oil","get_ticket/inflate_tires","get_ticket/diagnostic"]
            result_check = ["Please wait around 0 minutes","Please wait around 0 minutes","Please wait around 2 minutes","Please wait around 9 minutes","Please wait around 14 minutes"]

            i = 0

            for link in ticket_links:
                try:
                    divs_from_page = re.findall(self.DIV_PATTERN, self.read_page(self.get_url() + link), re.S)
                except urllib.error.URLError:
                    return CheckResult.wrong(
                        f'Cannot connect to the {link}.'
                    )
                divs_from_page = self.__stripped_list(divs_from_page)
                if result_check[i] not in divs_from_page:
                    print(divs_from_page)
                    return CheckResult.wrong(
                        f'Page page should contain {result_check[i]}'
                    )
                i+=1

            return CheckResult.correct()


        def check_ticket_page_links_with_menu(self):

            ticket_links = ["get_ticket/inflate_tires","get_ticket/change_oil","get_ticket/change_oil","get_ticket/inflate_tires","get_ticket/diagnostic"]
            result_check = ["Please wait around 0 minutes","Please wait around 0 minutes","Please wait around 2 minutes","Please wait around 9 minutes","Please wait around 14 minutes"]
            result_check_menu = ["Inflate tires queue: 1", "Change oil queue: 1", "Change oil queue: 2",
                            "Inflate tires queue: 2", "Get diagnostic queue: 1"]
            i = 0

            for link in ticket_links:
                try:
                    divs_from_page = re.findall(self.DIV_PATTERN, self.read_page(self.get_url() + link), re.S)
                except urllib.error.URLError:
                    return CheckResult.wrong(
                        f'Cannot connect to the {link}.'
                    )
                divs_from_page = self.__stripped_list(divs_from_page)
                if result_check[i] not in divs_from_page:
                    print(divs_from_page)
                    return CheckResult.wrong(
                        f'Page page should contain {result_check[i]}'
                    )
                try:
                    divs_from_page = re.findall(self.DIV_PATTERN, self.read_page(self.get_url() + "processing"), re.S)
                except urllib.error.URLError:
                    return CheckResult.wrong(
                        f'Cannot connect to the  "/processing".'
                    )
                divs_from_page = self.__stripped_list(divs_from_page)
                if result_check_menu[i] not in divs_from_page:
                    print(divs_from_page)
                    return CheckResult.wrong(
                        f'Page page should contain {result_check_menu[i]}'
                    )
                i+=1

            return CheckResult.correct()

        def __stripped_list(self, list):
            return [item.strip() for item in list]

        def __stripped_list_with_tuple(self, list):
            return [item[0].strip() for item in list]
  learner_created: false
feedback_link: https://hyperskill.org/projects/85/stages/473/implement#comment
status: Unchecked
record: -1
